"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPath = void 0;
const markdown_1 = require("../../lib/markdown");
const types_1 = require("../../types");
const externalDocs_1 = require("../common/v2-3/externalDocs");
const security_1 = require("../common/v2-3/security");
const pathResponses_1 = require("./pathResponses");
const pathParameters_1 = require("./pathParameters");
const pathRequestBody_1 = require("./pathRequestBody");
function transformPath(path, data) {
    let pathParameters = [];
    if (!path || !data) {
        return null;
    }
    const md = markdown_1.Markdown.md();
    // Check if parameter for path are in the place
    if ('parameters' in data) {
        pathParameters = data.parameters;
    }
    // Go further method by methods
    Object.keys(data).forEach((method) => {
        if (types_1.ALLOWED_METHODS_V3.includes(method)) {
            const pathInfo = data[method];
            const deprecated = 'deprecated' in pathInfo && pathInfo.deprecated === true;
            md.line('');
            const header = (md.string(`[${method.toUpperCase()}] ${path}`));
            if (deprecated) {
                header.strikethrough();
            }
            header.h3();
            md.line(header);
            // Deprecation
            if (deprecated) {
                md.line().line(md.string('DEPRECATED').bold().italic()).line();
            }
            // Set summary
            if ('summary' in pathInfo) {
                md.line(md.string(pathInfo.summary).escape().bold()).line();
            }
            // Set description
            if ('description' in pathInfo && pathInfo.summary !== pathInfo.description) {
                md.line(md.string(pathInfo.description).escape()).line();
            }
            // Set externalDocs
            if ('externalDocs' in pathInfo) {
                md.line(md.string('Documentation:').bold(), md.string(' '), (0, externalDocs_1.transformExternalDocs)(pathInfo.externalDocs));
            }
            // Build parameters
            if ('parameters' in pathInfo || pathParameters) {
                const builtParameters = md.string((0, pathParameters_1.transformParameters)(pathInfo.parameters, pathParameters));
                if (builtParameters.length) {
                    md.line(builtParameters).line();
                }
            }
            // Build Request bodies
            if ('requestBody' in pathInfo && pathInfo.requestBody) {
                const requestBody = pathInfo.requestBody;
                if (requestBody) {
                    const builtRequestBody = md.string((0, pathRequestBody_1.transformRequestBody)(requestBody));
                    if (builtRequestBody.length) {
                        md.line(builtRequestBody).line();
                    }
                }
            }
            // Build responses
            if ('responses' in pathInfo) {
                const builtResponses = md.string((0, pathResponses_1.transformResponses)(pathInfo.responses));
                if (builtResponses.length) {
                    md.line(builtResponses).line();
                }
            }
            // Build security
            if ('security' in pathInfo) {
                md.line((0, security_1.transformSecurity)(pathInfo.security));
            }
        }
    });
    return md.export();
}
exports.transformPath = transformPath;
