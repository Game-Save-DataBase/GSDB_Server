"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schema = void 0;
class Schema {
    /**
     * constructor
     *
     * @param {OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject} [schema=undefined]
     */
    constructor(schema) {
        this.properties = {};
        this.enum = [];
        if (schema) {
            // Check if it's a Reference Object
            if ('$ref' in schema) {
                this.setReference(schema.$ref);
            }
            else {
                // It's a Schema Object
                if ('type' in schema && schema.type) {
                    this.setType(schema.type);
                }
                if ('format' in schema && schema.format) {
                    this.setFormat(schema.format);
                }
                if ('items' in schema && schema.items) {
                    this.setItems(schema.items);
                }
                if ('allOf' in schema && schema.allOf) {
                    this.setAllOf(schema.allOf);
                }
                if ('properties' in schema && schema.properties) {
                    // At this point the document is dereferenced
                    // So we can avoid the reference here
                    this.setProperties(schema.properties);
                }
                if ('default' in schema) {
                    this.setDefault(schema.default);
                }
                if ('enum' in schema && schema.enum) {
                    this.enum = schema.enum;
                }
            }
        }
    }
    /**
     * @param {String} ref
     */
    setReference(ref) {
        this.ref = ref;
        return this;
    }
    /**
     * @return {String}
     */
    getReference() {
        return this.ref;
    }
    /**
     * @param {string} defaultValue
     * @return {*}  {Schema}
     * @memberof Schema
     */
    setDefault(defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }
    setEnum(enumValues) {
        this.enum = enumValues;
        return this;
    }
    /**
     * @param {({
     *     [name: string]: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject
     *   })} properties
     * @return {*}  {Schema}
     * @memberof Schema
     */
    setProperties(properties) {
        Object.keys(properties).forEach((name) => {
            this.properties[name] = new Schema(properties[name]);
        });
        return this;
    }
    /**
     * @param {String} type
     */
    setType(type) {
        // @todo: wtf
        this.type = type;
        return this;
    }
    /**
     * @param {Array<Object>} allOf
     */
    setAllOf(allOf) {
        this.allOf = allOf.map((schema) => new Schema(schema));
        return this;
    }
    /**
     * @param {String} format
     */
    setFormat(format) {
        this.format = format;
        return this;
    }
    /**
     * @param {OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject} items
     */
    setItems(items) {
        this.items = new Schema(items);
        return this;
    }
    /**
     * @return {String}
     */
    getType() {
        return this.type;
    }
    /**
     * @return {String}
     */
    getFormat() {
        return this.format;
    }
    /**
     * @return {Object}
     */
    getItems() {
        return this.items;
    }
    /**
     * @return {Array<Schema>}
     */
    getAllOf() {
        return this.allOf;
    }
    getProperties() {
        return this.properties;
    }
    getDefault() {
        return this.defaultValue;
    }
    getEnum() {
        return this.enum;
    }
}
exports.Schema = Schema;
