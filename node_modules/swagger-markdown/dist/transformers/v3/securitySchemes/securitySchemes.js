"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformSecuritySchemes = void 0;
const markdown_1 = require("../../../lib/markdown");
const httpSecurityScheme_1 = require("./httpSecurityScheme");
const apiKeySecurityScheme_1 = require("./apiKeySecurityScheme");
const OAuth2SecurityScheme_1 = require("./OAuth2SecurityScheme");
const openIdSecurityScheme_1 = require("./openIdSecurityScheme");
function transformSecuritySchemes(securitySchemas) {
    const md = markdown_1.Markdown.md();
    Object.keys(securitySchemas).forEach((type) => {
        const schema = securitySchemas[type];
        if ((0, httpSecurityScheme_1.isHttpSecurityScheme)(schema)) {
            md.line((0, httpSecurityScheme_1.transformHTTPSecurityScheme)(type, schema));
        }
        if ((0, apiKeySecurityScheme_1.isApiKeySecurityScheme)(schema)) {
            md.line((0, apiKeySecurityScheme_1.transformApiKeySecuritySchema)(type, schema));
        }
        if ((0, OAuth2SecurityScheme_1.isOAuth2SecurityScheme)(schema)) {
            md.line((0, OAuth2SecurityScheme_1.transformOAuth2SecurityScheme)(type, schema));
        }
        if ((0, openIdSecurityScheme_1.isOpenIdSecurityScheme)(schema)) {
            md.line((0, openIdSecurityScheme_1.transformOpenIdSecurityScheme)(type, schema));
        }
    });
    if (md.length > 0) {
        return markdown_1.Markdown.md()
            .line(md.string('Available authorizations').h3())
            .line(md.export())
            .export();
    }
    return null;
}
exports.transformSecuritySchemes = transformSecuritySchemes;
