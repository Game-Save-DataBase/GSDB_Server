"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOAuth2SecurityScheme = exports.isOAuth2SecurityScheme = void 0;
const markdown_1 = require("../../../lib/markdown");
function isOAuth2SecurityScheme(scheme) {
    return scheme.type === 'oauth2';
}
exports.isOAuth2SecurityScheme = isOAuth2SecurityScheme;
function transformOAuth2SecurityScheme(name, scheme) {
    const md = markdown_1.Markdown.md();
    const types = Object.keys(scheme.flows || {}).join(', ');
    const typesNumber = Object.keys(scheme.flows || {}).length;
    md.line(md.string(`${name} (OAuth2, ${types})`).h4());
    if (scheme.description) {
        md.line(md.string(scheme.description).br());
    }
    if (scheme.flows) {
        Object.keys(scheme.flows).forEach((flowType) => {
            if (typesNumber > 1) {
                md.line(md.string(`**Flow:** ${flowType}`).bold().br());
            }
            const flow = scheme.flows[flowType];
            if (flow.authorizationUrl) {
                md.line(md.string(`Authorization URL: ${flow.authorizationUrl}`).br());
            }
            if (flow.tokenUrl) {
                md.line(md.string(`Token URL: ${flow.tokenUrl}`).br());
            }
            if (flow.refreshUrl) {
                md.line(md.string(`Refresh URL: ${flow.refreshUrl}`).br());
            }
            if (flow.scopes) {
                md.line(md.string('Scopes:'));
                md.line(md.string().br());
                Object.keys(flow.scopes).forEach((scope) => {
                    md.line(md.string(`- ${scope}: ${flow.scopes[scope]}`).br());
                });
                md.line(md.string().br());
                md.line();
            }
        });
    }
    return md.export();
}
exports.transformOAuth2SecurityScheme = transformOAuth2SecurityScheme;
