"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformParameters = void 0;
const dataTypes_1 = require("./dataTypes");
const Schema_1 = require("./models/Schema");
const markdown_1 = require("../../lib/markdown");
const transformParameters = (parameters = [], pathParameters = []) => {
    const allParameters = [...parameters, ...pathParameters];
    if (allParameters.length === 0) {
        return '';
    }
    const md = markdown_1.Markdown.md();
    md.line(md.string('Parameters').h4()).line();
    const table = md.table();
    table.th('Name').th('Located in').th('Description').th('Required')
        .th('Schema');
    // Combine path and operation parameters, ensuring they are V3 objects
    allParameters.forEach((parameterObject) => {
        var _a;
        if (parameterObject) {
            const tr = table.tr();
            // Name first
            tr.td(parameterObject.name || '');
            // Scope (in)
            tr.td(parameterObject.in || '');
            // description
            if ('description' in parameterObject && parameterObject.description) {
                tr.td(md.string(parameterObject.description.replace(/[\r\n]/g, ' ')).escape());
            }
            else {
                tr.td('');
            }
            tr.td(parameterObject.required ? 'Yes' : 'No');
            // Prepare schema to be transformed - V3 parameters have schema property
            let schema = null;
            if ('schema' in parameterObject && parameterObject.schema) {
                // Constructor now handles ReferenceObject | SchemaObject
                schema = new Schema_1.Schema(parameterObject.schema);
            }
            else if ('content' in parameterObject && parameterObject.content) {
                // Handle parameters with 'content' instead of 'schema' (e.g., requestBody)
                // For simplicity, we might just indicate the media type or take the first one
                const mediaType = Object.keys(parameterObject.content)[0];
                if (mediaType && ((_a = parameterObject.content[mediaType]) === null || _a === void 0 ? void 0 : _a.schema)) {
                    // Constructor now handles ReferenceObject | SchemaObject
                    schema = new Schema_1.Schema(parameterObject.content[mediaType].schema);
                }
                else {
                    schema = new Schema_1.Schema({}); // Fallback for content without schema
                }
            }
            else {
                // Fallback if neither schema nor content is present
                schema = new Schema_1.Schema({});
            }
            tr.td((0, dataTypes_1.dataTypeResolver)(schema)); // dataTypeResolver expects a Schema object
        }
    });
    md.line(table);
    return md.export();
};
exports.transformParameters = transformParameters;
